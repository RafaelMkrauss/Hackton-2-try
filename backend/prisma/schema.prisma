// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id           String                @id @default(cuid())
    email        String?               @unique
    password     String?
    name         String?
    role         String                @default("USER") // USER, STAFF, ADMIN
    isActive     Boolean               @default(true)
    address      String?
    latitude     Float?
    longitude    Float?
    neighborhood String?
    reports      Report[]
    evaluations  SemestralEvaluation[]
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt

    @@map("users")
}

model Report {
    id          String   @id @default(cuid())
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?
    photoUrl    String?
    category    String
    description String
    latitude    Float
    longitude   Float
    address     String?
    status      String   @default("PENDING") // PENDING, IN_PROGRESS, RESOLVED, REJECTED
    priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
    comment     String?
    staffId     String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("reports")
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    title     String
    message   String
    read      Boolean  @default(false)
    type      String   @default("info")
    createdAt DateTime @default(now())

    @@map("notifications")
}

model SemestralEvaluation {
    id             String           @id @default(cuid())
    user           User             @relation(fields: [userId], references: [id])
    userId         String
    semester       Int // 1 or 2
    year           Int
    ratings        CategoryRating[]
    generalComment String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@unique([userId, semester, year])
    @@map("semestral_evaluations")
}

model CategoryRating {
    id           String              @id @default(cuid())
    evaluation   SemestralEvaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    evaluationId String
    category     String // Same categories as Report model
    rating       Int // 1-5 scale
    comment      String?
    createdAt    DateTime            @default(now())

    @@map("category_ratings")
}
